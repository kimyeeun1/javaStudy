-- 1. 현재 시간을 조회한다.
SELECT SYSDATE 
  FROM DUAL --DUMMY TABLE(row가 하나만 있는 의미 없는 테이블)
;
-- 2. 현재 시간을 "연-월-일" 포멧으로 조회한다.
SELECT TO_CHAR(SYSDATE) --BUG(이렇게 사용하면 안됨 -> 실제 웹서버에서는 해당 SQL은 에러를 일으킴)
	 , TO_CHAR(SYSDATE, 'YYYY-MM-DD') 
  FROM DUAL
;
-- 3. 한 시간 전 시간을 "시:분:초" 포멧으로 조회한다.
SELECT TO_CHAR(SYSDATE, 'HH:MI:SS') --12시간 베이스
	 , TO_CHAR(SYSDATE, 'HH24:MI:SS') --24시간 베이스
  FROM DUAL
;
-- 4. EMPLOYEES 테이블의 모든 정보를 조회한다.
SELECT * -- *의 의미ㅣ 모든 컬럼
  FROM EMPLOYEES 
;

-- 4-1. EMPLOYEES 테이블에서 first_name으로 오름차순 정렬하기
SELECT *
  FROM EMPLOYEES
 ORDER BY FIRST_NAME ASC 
;

-- 4-2. EMPLOYEES 테이블에서 last_name으로 내림차순 정렬하기
SELECT *
  FROM EMPLOYEES
 ORDER BY LAST_NAME DESC 
;

-- 4-3. EMPLOYEES 테이블에서 first_name으로 오름차순 정렬하고 last_name으로 내림차순 정렬하기
--		first_name으로 오름차순 정렬된 상태에서, last_name만 내림차순 정렬 수행
SELECT *
  FROM EMPLOYEES e 
 ORDER BY FIRST_NAME ASC 
 	 , LAST_NAME DESC
;
-- order by의 주의점 --> 데이터 수가 굉장히 많은 테이블에서 order by를 수행하면 성능이 기하급수적으로 느려진다
--					   실무에서는 가급적이면 정렬 x, 정말 필요할 때만 수행

-- 5. DEPARTMENTS 테이블의 모든 정보를 조회한다.
SELECT *
  FROM DEPARTMENTS
;
-- 6. JOBS 테이블의 모든 정보를 조회한다.
SELECT *
  FROM JOBS
;
-- 7. LOCATIONS 테이블의 모든 정보를 조회한다.
SELECT *
  FROM LOCATIONS
;
-- 8. COUNTRIES 테이블의 모든 정보를 조회한다.
SELECT *
  FROM COUNTRIES
;

-- 9. REGIONS 테이블의 모든 정보를 조회한다.
SELECT *
  FROM REGIONS
;
-- 10. JOB_HISTORY 테이블의 모든 정보를 조회한다.
SELECT *
  FROM JOB_HISTORY
;
-- 11. 90번 부서에서 근무하는 사원들의 모든 정보를 조회한다.
-- 11. EMPLOYEES 테이블에서 DEPARTMENT_ID가 90인 사원의 모든 컬럼을 조회한다.
SELECT *
  FROM EMPLOYEES e 
 WHERE DEPARTMENT_ID = 90
; 

-- 12. 90번, 100번 부서에서 근무하는 사원들의 모든 정보를 조회한다.
-- 12. EMPLOYEES 테이블에서 DEPARTMENT_ID가 90이거나 100인 모든 컬럼을 조회한다.
SELECT *
  FROM EMPLOYEES e 
 WHERE DEPARTMENT_ID = 90 OR DEPARTMENT_ID = 100
;

-- 13. 100번 상사의 직속 부하직원의 모든 정보를 조회한다.
-- EMPLOYEES 테이블에서 MANAGER_ID가 100인 모든 컬럼을 조회한다
SELECT *
  FROM EMPLOYEES e 
 WHERE MANAGER_ID = 100
;

-- 14. 직무 아이디가 AD_VP 인 사원의 모든 정보를 조회한다.
-- EMPLOYEES 테이블에서 JOB_ID가 'AD_VP'인 모든 컬럼을 조회한다
SELECT *
  FROM EMPLOYEES e 
 WHERE JOB_ID = 'AD_VP'
;

-- 15. 연봉이 7000 이상인 사원의 모든 정보를 조회한다.
-- EMPLOYEES 테이블에서 SALARY가 7000보다 큰 모든 컬럼을 조회한다
SELECT *
  FROM EMPLOYEES e 
 WHERE SALARY > 7000
;

-- 15-1. EMPLOYEES 테이블에서 SALARY가 7000 이상이고 JOB_ID가 'IT_PROG'이며, DEPARTMENT_ID가 60인 모든 컬럼을 조회한다
--		 SALARY를 기준으로 내림차순 정렬을 한다
--	정렬: ORDER BY
--	ORDER BY는 SQL의 가장 마지막에 작성
SELECT *
  FROM EMPLOYEES e 
 WHERE SALARY >= 7000
   AND JOB_ID = 'IT_PROG'
   AND DEPARTMENT_ID = 60
 ORDER BY SALARY DESC 
;

-- 15-2. DEPARTMENTS(부서정보) 테이블에서 DEPARTMENT_ID(부서번호)가 60인 DEPARTMENT_NAME만 조회
SELECT DEPARTMENT_NAME 
  FROM DEPARTMENTS d 
 WHERE DEPARTMENT_ID = 60
;

-- 16. 2005년 09월에 입사한 사원들의 모든 정보를 조회한다.
-- 2005년 9월 1일부터 2005년 9월 30일 사이에 입사한 사람들의 정보를 조회 -> 기간 검색 => BETWEEN A AND B
/*
 * 숫자타입의 컬럼: 123 숫자비교
 * 문자타입의 컬럼: ''  문자비교
 * 날짜타입의 컬럼: ??  날짜비교
 */
SELECT SYSDATE 
     , TO_DATE('2005-09-01', 'YYYY-MM-DD')
  FROM DUAL
 ;
SELECT *
  FROM EMPLOYEES e 
 WHERE HIRE_DATE BETWEEN TO_DATE('2005-09-01', 'YYYY-MM-DD') AND TO_DATE('2005-09-30', 'YYYY-MM-DD')
 ORDER BY HIRE_DATE
;

/*
 * 날짜 -> 문자 사용 함수 TO_CHAR(날짜타입의 컬럼, '포멧')
 * 문자 -> 날짜 사용 함수 TO_DATE(문자타입의 컬럼 혹은 값, '포멧')
 */

-- 17. 111번 사원의 모든 정보를 조회한다.
SELECT *
  FROM EMPLOYEES e 
 WHERE EMPLOYEE_ID = 111
;

-- 18. 인센티브를 안받는 사원들의 모든 정보를 조회한다.
-- EMOLOYEES 테이블에서 COMMISSION_PCT의 값이 NULL인 모든 컬럼을 조회한다
SELECT *
  FROM EMPLOYEES e 
 WHERE COMMISSION_PCT IS NULL
;

/*
 * 실습문제
 * 1. EMPLOYEES 테이블에서 JOB_ID가 SA_MAN이거나, SA_REP이거나, IT_PROG인 데이터 중
 * 	  SALARY가 10,000 이상인 데이터 중
 * 	  MANAGER_ID가 100인 데이터의 FIRST_NAME, LAST_NAME, EMPLOYEES_ID 컬럼을 조회
 */
SELECT FIRST_NAME, LAST_NAME, EMPLOYEE_ID
  FROM EMPLOYEES e 
 WHERE (JOB_ID = 'SA_MAN'
    OR JOB_ID = 'SA_REP'
    OR JOB_ID = 'IT_PROG')
   AND SALARY >= 10000
   AND MANAGER_ID = 100
;

-- 반복적인 OR 대신 IN 사용
SELECT FIRST_NAME, LAST_NAME, EMPLOYEE_ID
  FROM EMPLOYEES e 
 WHERE JOB_ID IN ('SA_MAN', 'SA_REP', 'IT_PROG')
   AND SALARY >= 10000
   AND MANAGER_ID = 100
;
-- IN 연산자의 주의점
-- 1. IN에 들어갈 값의 최대 개수는 1000개 -> 비교할 값의 개수가 명확할 때 사용
-- 2. IN에 들어갈 값 중 NULL은 연산 불가 -> NULL은 IS NULL 혹은 IS NOT NULL 비교 가능

/*
 * 2. EMPLOYEES 테이블에서 DEPARTMENT_ID가 10 ~ 60 사이인 데이터 중
 * 	  SALARY가 10,000 미만 데이터를 SALARY 기준으로 내림차순 정렬해서 모든 컬럼을 조회
 */
SELECT *
  FROM EMPLOYEES e 
 WHERE DEPARTMENT_ID BETWEEN 10 AND 60 -- BETWEEN은 기간 검색할 때 주로 사용
   AND SALARY < 10000
 ORDER BY SALARY DESC 
;

/*
 * 3. EMPLOYEES 테이블에서 SALARY가 11,000 이상인 데이터 중에서
 * 	  COMMISSION_PCT가 0.2 이상인 데이터를 COMMISSION_PCT를 기준으로 오름차순 정렬
 *    SALARY를 기준으로 내림차순 정렬하여 모든 컬럼을 조회
 */
SELECT *
  FROM EMPLOYEES e 
 WHERE SALARY >= 11000
   AND COMMISSION_PCT >= 0.2
 ORDER BY COMMISSION_PCT ASC 
     , SALARY DESC 
;

-- ORDER BY의 정렬방법이 ASC라면, ASC는 생략가능

-- 19. 인센티브를 받는 사원들의 모든 정보를 조회한다.
-- EMOLOYEES 테이블에서 COMMISSION_PCT의 값이 NULL이 아닌 모든 컬럼을 조회한다
SELECT *
  FROM EMPLOYEES e 
 WHERE COMMISSION_PCT IS NOT NULL
;

-- 20. 이름의 첫 글자가 'D' 인 사원들의 모든 정보를 조회한다.
-- EMPLOYEES 테이블에서 FIRST_NAME 컬럼 값이 D로 시작하는 데이터의 모든 컬럼을 조회
/*
 * 포함, 시작, 끝 검색
 * %$ 사용
 * 
 * COLUMN LIKE 'D%' --> 컬럼의 값이 D로 시작한다
 * COLUMN LIKE '%D' --> 컬럼의 값이 D로 끝난다
 * COLUMN LIKE '%D%' --> 컬럼의 값이 D로 시작하거나, D로 끝나거나, 중간에 D가 존재한다 
 */
SELECT *
  FROM EMPLOYEES e 
 WHERE FIRST_NAME LIKE 'D%'
;

-- 21. 성의 마지막 글자가 'a' 인 사원들의 모든 정보를 조회한다.
SELECT *
  FROM EMPLOYEES e 
 WHERE LAST_NAME LIKE '%a'
;

-- 22. 전화번호에 '.124.'이 포함된 사원들의 모든 정보를 조회한다.
SELECT *
  FROM EMPLOYEES e 
 WHERE PHONE_NUMBER LIKE '%.124.%'
;

-- 실습 문제
-- 4. EMPLOYEES 테이블에서 FIRST_NAME 혹은 LAST_NAME에 'e' 또는 'E'가 포함된 데이터의
-- 모든 컬럼을 조회 한다
SELECT *
  FROM EMPLOYEES e 
 WHERE FIRST_NAME LIKE '%e%'
    OR FIRST_NAME LIKE '%E%'
    OR LAST_NAME LIKE '%e%'
    OR LAST_NAME LIKE '%E%'
;

/*
 * COL LIKE '%A%' --> COL에 대문자A가 포함되어 있는가?
 * COL NOT LIKE '%A%' --> COL에 대문자A가 포함되어 있지 않은가?
 * 
 * COL IN (10, 20, 30) --> COL의 값이 10, 20, 30 중에 하나인가?
 * COL NOT IN (10, 20, 30) --> COL의 값이 10, 20, 30 모두 아닌가?
 * 
 * COL BETWEEN A AND B --> COL의 값이 A와 B 사이인가?
 * COL NOT BETWEEN A AND B --> COL의 값이 A와 B 사이가 아닌가?
 */

-- 23. 직무 아이디가 'PU_CLERK'인 사원 중 연봉이 3000 이상인 사원들의 모든 정보를 조회한다.
-- 24. 평균 연봉보다 많이 받는 사원들의 사원번호, 이름, 성, 연봉을 조회한다.
-- 25. 평균 연봉보다 적게 받는 사원들의 사원번호, 연봉, 부서번호를 조회한다.
-- 26. 가장 많은 연봉을 받는 사원의 사원번호, 이름, 연봉을 조회한다.
-- 27. 이름이 4글자인 사원의 모든 정보를 조회한다.
-- EMPLOYEES 테이블에서 FIRST_NAME의 길이가 4글자인 데이터의 모든 컬럼을 조회한다
SELECT *
  FROM EMPLOYEES 
 WHERE FIRST_NAME LIKE '____'
;

-- LIKE, 글자의 수를 체크하는 와일드카드: _ (언더바)
/*
 * COL LIKE '__' --> COL의 값이 두 글자인가?
 * COL LIKE '_____' --> COL의 값이 다섯 글자인가?
 * 
 * COL LIKE 'A__%' --> COL의 값이 A로 시작해서 두 글자 이상이 더 있는가?
 */
